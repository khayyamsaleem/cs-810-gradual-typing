* Notes

** Useful environments

#+BEGIN_SRC scheme
system-global-environment  ; use for redefining stuff
(the-environment)          ; needs to be called. use inside functions/macros (at top level)
                           ; i.e. bind inside a `let' fist
(nearest-repl/environment) ; needs to be called.
#+END_SRC


** General pattern for redefining internal procedures

Get value from the environment

#+BEGIN_SRC scheme
(define *symbol* (environment-lookup system-global-environment 'symbol))
(define-syntax symbol
  ...)
#+END_SRC

** Scheme types we are concerned with

- =fixnum= : an integer constant. e.g. =1=
- =ratnum= : a rational constant e.g. =(/ 1 2)=
- =flonum= : a floating point constant e.g. =1.0=
- =recnum= : a complex number e.g. =3+4i=
- =string= : a string e.g. =("H")=
- =character= : a character e.g. =#\c=
- =pair= : a cons cell e.g. =(1 . 2)=
- =list= : a cons cell ending with the empty list e.g =(1 2)=
- =procedure= : a lambda expression e.g. =(lambda (x) x)=
- =interned-symbol= : a symbol
- =uninterned-symbol= : a fresh symbol guaranteed to not exist in the environment

** Getting run-time type information in MIT/Scheme

The expression is evaluated

#+BEGIN_SRC scheme
(dispatch-tag expr)
(dispatch-tag-contents (dispatch-tag expr)) ; to view the contents
#+END_SRC

** No-eval macro

=quote= is used to stop evalution.

#+BEGIN_SRC scheme
(define-syntax no-eval
  (syntax-rules ()
    ((_ expr)
     (quote expr))))
#+END_SRC

** Using the pattern matcher in =linear-match=

=linear-match.scm= contains the pattern matcher found at [[http://okmij.org/ftp/Scheme/macros.html#match-case-simple]]

Each pattern is required to have a guard. =()= is the empty guard.
=(,x)= represents a variable. Will be bound as =x= if matched.

Examples
#+BEGIN_SRC scheme
(define (sum-list ls)
  (match ls
    (() () 0) ; match with empty list
    ((,x . ,xs) (number? x) (+ x (sum-list xs)))))
#+END_SRC


** Type consistency =~=

All of this can be found in the file =first.scm=

Implements the following rules

$$\tau \sim \tau$$

$$\frac{\sigma_1 \sim \tau_1 \qquad \sigma_2 \sim \tau_2}{\sigma_1 \rightarrow \sigma_2 \sim \tau_1 \rightarrow \tau_2}$$

$$\tau \sim ?$$

$$? \sim \tau$$


#+BEGIN_SRC scheme
(define (~ type1 type2)
  (cond ((or (any-type? type1) (any-type? type2)) #t)
	((equal? type1 type2) #t)
	((and (pair? type1) (pair? type2))
	 (and (~ (car type1) (car type2))
	      (~ (cdr type1) (cdr type2))))
	(else #f)))
#+END_SRC

** Type Checker -- =typed-lambda=

All of this can be found in the file =first.scm=

Implements the typing rule

$$\frac{\Gamma, x:\sigma \vdash e : \tau}{\Gamma \vdash (\lambda x : \sigma . e) : \sigma \rightarrow \tau}$$

The =typed-lambda= form simply evaluates to a =lambda= expression for now.
Later on, we will want to use =type-check= on the expression first.

Examples of =typed-lambda=

#+BEGIN_SRC scheme
(define inc (typed-lambda (: x 'number) (+ x 1)))

(define len
  (typed-lambda (: x 'list)
		(if (null? x)
		    0
		    (+ 1 (len (cdr x))))))

(define apply-func
  (typed-lambda (: f '(-> any any))
		(typed-lambda (: x 'any)
			      (f x))))

#+END_SRC

#+BEGIN_SRC scheme
(define (type-check expr type gamma)
  (match expr
    ...					; Lot more here

    (('typed-lambda (: ,x ,s) ,body) (arrow-type? type)
     (if (not (~ s (domain type)))
	 (error "Inconsistent parameter type -- " s 'with (domain type))
	 (let ((param-type s))
	   (make-arrow param-type
		       (type-check body
				   (codomain type)
				   (cons (cons x param-type) gamma))))))

    (__ () (error "Type checking failed -- " expr 'with type))))
#+END_SRC

** Dealing with n-ary functions

$$\sigma \rightarrow_{n} \tau \equiv \underbrace{\sigma \times \sigma \times \dots \times \sigma}_{n} \rightarrow \tau$$

** Types

#+BEGIN_SRC scheme
(->n number number)
(-> number (-> boolean any))
(->2 number boolean)
(-> (* number number) boolean)
(-> (* number boolean) string)
#+END_SRC

** Typing Rules

*Will have to rethink these rules. Approach now is to first cast Scheme expressions and then type-check*

*** Variables
$$\frac{\Gamma(x) = \sigma}{\Gamma \vdash x : \sigma}$$

*** Abstractions

**** unary
$$\frac{\Gamma, x:\sigma \vdash M : \tau}{\Gamma \vdash \lambda x:\sigma.M :\sigma \rightarrow \tau}$$

**** n-ary 
$$\frac{\Gamma, x_1 : \sigma_1, x_2 : \sigma_2, \dots, x_n : \sigma_n \vdash M : \tau}{\Gamma \vdash \lambda (x_1:\sigma_1,x_2:\sigma_2,\dots,x_n:\sigma_n).M : \sigma_1 \times \sigma_2 \times \dots \times \sigma_n \rightarrow \tau}$$

$$\frac{\Gamma,x_i^{i\in1,\dots,n}:\sigma \vdash M : \tau}{\Gamma \vdash \lambda (x_1:\sigma,x_2:\sigma,\dots,x_n:\sigma).M : \sigma \rightarrow_{n} \tau}$$

*** Application

$$\frac{\Gamma \vdash M : \sigma \rightarrow_n \tau \quad \Gamma \vdash N_i^{i \in 1,\dots,n} : \sigma}{\Gamma \vdash (M N_1 N_2 \dots N_n) : \tau}$$

* Type Checking without Casting

The following passes the current type checker.

#+BEGIN_SRC scheme
(type-check '((typed-lambda (:: x number) (+ x 1)) "H") 'any '())
#+END_SRC

There doesn't seem to be a straightforward way to add the =typed-lambda= expression to
the type environment (=()= here). Took a look at the main paper again, and it seems like
casting is one way this issue can be avoided. 

* Casting to an Intermediate Language

This is probably the approach we should take. It is also the one described in "Gradual Typing
for Functional Languages"

** Cast Insertion

For right now, we'll implement the following rules. 

Rule for variables. $\lfloor \tau \rfloor$ represents an optional type. We are going to set this to the =any= type
as a default. 

$$\frac{\Gamma x = \lfloor \tau \rfloor}{\Gamma \vdash x \Rightarrow x : \tau}$$

Rule for predefined types and constants. Think =+=, =*=, =>=, =<=, and so on
$$\frac{\Delta c = \tau}{\Gamma \vdash c \Rightarrow c : \tau}$$

Rule for $\lambda$
$$\frac{\Gamma, x : \sigma \vdash e \Rightarrow e^' : \tau}{\Gamma \vdash \lambda x : \sigma . e \Rightarrow \lambda x : \sigma . e^' : \sigma \rightarrow \tau}$$

Rule for application. The rules depend on the information available in $\Gamma$
$$\frac{\Gamma \vdash e_1 \Rightarrow e_1^' : ? \quad \Gamma \vdash e_2 \Rightarrow e_2^' : \tau_2}{\Gamma \vdash e_1 e_2 \Rightarrow (\langle \tau_2 \rightarrow ? \rangle e_1^') e_2^' : ?}$$

$$\frac{\Gamma \vdash e_1 \Rightarrow e_1^' : \tau \rightarrow \tau^' \quad \Gamma \vdash e_2 \Rightarrow e_2^' : \tau_2 \quad \tau_2 \neq \tau \quad \tau_2 \sim \tau}{\Gamma \vdash e_1 e_2 \Rightarrow e_1^' (\langle \tau \rangle e_2^') : \tau^'}$$

$$\frac{\Gamma \vdash e_1 \Rightarrow e_1^' : \tau \rightarrow \tau^' \quad \Gamma \vdash e_2 \Rightarrow e_2^' : \tau}{\Gamma \vdash e_1 e_2 \Rightarrow e_1^' e_2^' : \tau^'}$$

** Casting Function

Will look something like this

#+BEGIN_SRC scheme
(define (cast e Γ)
  (pmatch expr
    (,e (guard (symbol? e)) `(: e (lookup Γ e)))  
    ((λ (: ,x ,type) ,body) `(λ (: x type) (cast body (extend Γ x type))))
    ((,e1 . ,e2) ... rules for application)))
#+END_SRC

